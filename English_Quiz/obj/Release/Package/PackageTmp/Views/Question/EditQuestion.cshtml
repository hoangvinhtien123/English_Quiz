@model English_Quiz.Models.Question

@{
    ViewBag.Title = "Sửa câu hỏi";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>Chỉnh sửa câu hỏi</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Câu hỏi</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if (ViewBag.errorMsg != null)
        {
            <div class="well well-sm well-danger"> @ViewBag.errorMsg </div>
        }
        <div class="form-group">
            <label class="control-label col-md-2">Mã câu hỏi</label>

            <div class="col-md-10">
                @Html.EditorFor(model => model.QUESTION_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "" } })
                @Html.ValidationMessageFor(model => model.QUESTION_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Câu hỏi</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.QUESTION_TEXT, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QUESTION_TEXT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Điểm</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.POINT, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.POINT, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-12">
                <label class="control-label col-md-2" style="margin-right:20px;">Bài test</label>
                @Html.CheckBoxFor(model => model.IS_TEST, new { htmlAttributes = new { @class = "form-control" }, id = "cbIsTest" })
                @Html.ValidationMessageFor(model => model.IS_TEST, "", new { @class = "text-danger" })

            </div>
        </div>
        @*<div class="form-group" id="ddlListening" style="display:none">
                <label class="control-label col-md-2">Chọn bài nghe</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.LISTENING_ID, (SelectList)ViewBag.ListListening, "--Chọn--", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TYPE_ID, "", new { @class = "text-danger" })
                </div>
            </div>*@
        <div class="form-group" id="ddlType">
            <label class="control-label col-md-2">Loại</label>
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TYPE_ID, (SelectList)ViewBag.ListType, "--Chọn--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TYPE_ID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-10" id="jsGrid"></div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Lưu" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Trở lại", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        var data = [];
        function insertGrid(filter) {
            let question_id = $("#QUESTION_ID").val();
            return $.post("/Question/AddAnswer", {
                description: filter.DESCRIPTION,
                list_order: filter.LIST_ORDER,
                is_correct: filter.IS_CORRECT,
                question_id: question_id
            }, function (e) {

            }, "json")
        }
        function updateGrid(filter) {
            return $.post("/Question/UpdateAnswer", {
                answer_id: filter.ANSWER_ID,
                question_id: filter.QUESTION_ID,
                description: filter.DESCRIPTION,
                list_order: filter.LIST_ORDER,
                is_correct: filter.IS_CORRECT,
            }, function (e) {

            }, "json")
        }
        function deleteGrid(filter) {
            return $.post("/Question/DeleteAnswer", {
                answer_id: filter.ANSWER_ID,
                question_id: filter.QUESTION_ID
            }, function (e) {

            }, "json")
        }
        $(document).ready(function () {
            let question_id = $("#QUESTION_ID").val();
            $.post("/Question/GetAnswerByQuestionId", {
                question_id: question_id
            }, function (e) {

                if (e) {
                    data = e;
                }
                $("#jsGrid").jsGrid({
                    width: "100%",
                    height: "400px",
                    autoload: true,
                    controller: {
                        insertItem: function (filter) {
                            insertGrid(filter)
                        },
                        updateItem: function (filter) {
                            updateGrid(filter)
                        },
                        deleteItem: function (filter) {
                            deleteGrid(filter)
                        }
                    },
                    deleteConfirm: "Bạn có chắc chắn muốn xóa không?",
                    invalidMessage: "Lỗi",
                    noDataContent: "Không có dữ liệu",
                    data: e,
                    inserting: true,
                    editing: true,
                    sorting: true,
                    paging: true,

                    fields: [
                        {
                            name: "DESCRIPTION", title: "Câu trả lời", type: "text", width: 150, validate: {
                                validator: "required",
                                message: function (value, item) {
                                    return "Cần nhập câu trả lời";
                                },
                            }
                        },
                        { name: "LIST_ORDER", title: "Sắp xếp", type: "number", width: 25 },
                        { name: "IS_CORRECT", type: "checkbox", width: 20, title: "Đáp án", sorting: false },
                        { type: "control" }
                    ]
                });
            }, "json")
            //$("#cbIsListening").change(function (e) {
            //    if ($("#cbIsListening")[0].checked == true) {
            //        $("#ddlType").attr('style', 'display:none !important')
            //        $("#ddlListening").attr('style', 'display:visible !important')
            //    }
            //    else {
            //        $("#ddlListening").attr('style', 'display:none !important')
            //        $("#ddlType").attr('style', 'display:visible !important')
            //    }
            //});

        })

    </script>
}