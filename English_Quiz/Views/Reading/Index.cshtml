@model PagedList.IPagedList<English_Quiz.Models.Reading>
@using PagedList.Mvc;
@{
    ViewBag.Title = "Bài đọc";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<style>
    #reading_text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 500px;
    }
</style>
<h2>Bài đọc</h2>

<p style="margin-left:10px;">
    <a class="btn btn-primary" href='@Url.Action("CreateReading","Reading")'> Thêm mới</a>
</p>
@using (Html.BeginForm("Index", "Reading", FormMethod.Post, new { @id = "readingTypeSubmit" }))
{
    <div class="form-group row">
        <label class="control-label col-md-2" style="font-size:16px;">Loại bài đọc </label>
        <div class="col-md-4">
            @Html.DropDownList("ddlReadingType", (SelectList)ViewBag.ddlReadingType, "--- Chọn loại bài đọc ---", new { @class = "form-control", @name = "ddlReadingType", @onchange = "submitReadingType()" })
        </div>
    </div>
}
<table class="table">
    <tr>
        <th>
            Bài đọc
        </th>
        <th>
            Loại
        </th>
        <th>
            Ảnh
        </th>
        <th>
            Đề test
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td id="reading_text">
                @Html.DisplayFor(modelItem => item.READING_TEXT)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Reading_Type.READING_TYPE_NAME)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.READING_IMAGE)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IS_TEST)
            </td>
            <td>
                <a href='@Url.Action("EditReading","Reading", new{ id = item.READING_ID})' class="btn btn-info"><i class="fas fa-edit"></i></a>
                |
                <a href="javascript:void(0)" onclick="deleteQuizType(@item.READING_ID)" class="btn  btn-danger"><i class="far fa-trash-alt"></i></a>
                | <a href="#" onclick="showReadingQuestion('@item.READING_ID')" data-toggle="modal" class="btn btn-dark"><i class="fas fa-plus"></i></a>
            </td>
        </tr>
    }

</table>
<br />
Trang @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) / @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page = page,ddlReadingType =ViewBag.readingType }))
<div class="modal fade" id="modalListQuestion" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" style="overflow-y: initial !important">

        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Danh sách câu hỏi</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body" style="height: 80vh;overflow-y: auto;" id="contentListQuestion">

            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="modalQuestionDetail" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Thông tin câu hỏi</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label col-md-2">Mã câu hỏi</label>

                    <div class="col-md-10">
                        <input type="text" class="form-control" id="QUESTION_ID" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">Câu hỏi</label>
                    <div class="col-md-10">
                        <input type="text" class="form-control" id="QUESTION_TEXT" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">Điểm</label>
                    <div class="col-md-10">
                        <input type="number" min="1" class="form-control" id="POINT" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label col-md-2">Sắp xếp</label>
                    <div class="col-md-10">
                        <input type="number" min="1" class="form-control" id="LIST_ORDER" />
                    </div>
                </div>
                <input id="READING_ID" style="display:none;" />
                <div class="col-md-12" id="jsGrid"></div>
            </div>
            <div class="modal-footer">
                <button type="button" onclick="saveReadingQuestion()" class="btn btn-info" data-dismiss="modal">Lưu</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Đóng</button>
            </div>
        </div>

    </div>
</div>
@section scripts{
    <script type="text/javascript">
        function submitReadingType() {
        $("#readingTypeSubmit").submit();
        }
        var is_new = false;
        var questionIdNow = "";
        var questionNow = null;
        var is_add    = false;
        var is_edit   = false;
        var is_delete = false;
        const deleteQuizType = (id) => {
            Swal.fire({
                title: 'Bạn chắc chắn sẽ xóa?',
                text: "Bạn sẽ không thể khôi phục bản ghi này!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Xóa!',
                cancelButtonText: 'Đóng'
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: '@Url.Action("DeleteReading","Reading")' + `?id=${id}`,
                        type: 'POST',
                        success: function (data) {
                            if (data.Success) {
                               Swal.fire(
                                    'Deleted!',
                                    data.Message,
                                    'success'
                                )
                                setTimeout(function () { location.reload(); }, 700);

                            }
                            else {
                              Swal.fire(
                                    "Can't Delete",
                                    data.Message,
                                    'error'
                                )
                            }
                        },
                         error: function (error) {
                             alert('Lỗi ajax' + error)
                        },
                        cache: false,
                        processData: false,
                        contentType: false
                    });
                }
            })
        }

        //Question theo reading
        const initTableQuestions = (question, id, newQuestionid) => {
            questionNow = question;
            var listQuestion = `
                    <a class="btn btn-default" onclick="addReadingQuestion('`+ id + `' , '`+newQuestionid[0].QUESTION_ID+`')"> <i class="fas fa-plus"></i> Thêm mới </a>
                    <table class="table" style="margin-top:10px;">
                            <tr>
                                <th>
                                    Mã câu hỏi
                                </th>
                                <th>
                                    Câu hỏi
                                </th>
                                <th>
                                   Điểm
                                </th>
                                <th>
                                    Sắp xếp
                                </th>
                                <th></th>
                            </tr>

                       `;
                    if (question) {
                        for (var i = 0; i < question.length; i++) {
                            listQuestion += `<tr>
                                <td>` + question[i].QUESTION_ID +  `</td>
                                <td>` + question[i].QUESTION_TEXT +  `</td>
                                <td>` + question[i].POINT +  `</td>
                                <td>` + question[i].LIST_ORDER +  `</td>
                                <td>

                                    <a class="btn btn-info" onclick="editReadingQuestion('`+ id + `', '` + question[i].QUESTION_ID + `','` + question[i].POINT +`','`+question[i].LIST_ORDER+`')"> <i class="fas fa-edit"> </i> </a>
                                    <a class="btn btn-danger" onclick="deleteReadingQuestion('`+question[i].QUESTION_ID+`', '`+id+`')"> <i class="fas fa-trash-alt"> </i></a>
                                </td>
                                </tr>`
                        }
                    }
            listQuestion += ` </table>`;
            return listQuestion;
        }
        const showReadingQuestion = (id) => {
            $.post("/Reading/getQuestionByReadingId", {
                readingId : id
            }, function (e) {
                if (e.False != null && e.False != undefined) {
                    Swal.fire(
                        "Can't update!",
                        e.Message,
                        'error'
                    )
                }
                else {
                    var lstQuestion = initTableQuestions(e.data.Question, id, e.data.NewQuestionId)
                    is_add = e.Is_Add
                    is_edit = e.Is_Edit
                    is_delete = e.Is_Delete
                    $("#contentListQuestion").html(lstQuestion);
                    $('#modalListQuestion').modal('show');
                }
                    
            }, "json")
        }
        const addReadingQuestion = (id, newQuestionId) => {
            if (is_add) {
                $('#modalQuestionDetail').modal('show');
                $("#READING_ID").val(id);
                $("#QUESTION_ID").val(newQuestionId);
                $("#QUESTION_TEXT").val("");
                $("#POINT").val("");
                $("#LIST_ORDER").val("");
                is_new = true;
                loadJsGrid();
            }
            else {
                Swal.fire(
                    "Can't add!",
                    "Không có quyền thêm mới!",
                    'error'
                )
            }
            
        }
        const editReadingQuestion = (id, question_id, point, list_order) => {
            if (is_edit) {
                var question_text = questionNow.filter(x => x.QUESTION_ID == question_id)[0].QUESTION_TEXT;
                $('#modalQuestionDetail').modal('show');
                $("#READING_ID").val(id);
                $("#QUESTION_ID").val(question_id);
                $("#QUESTION_TEXT").val(question_text);
                $("#POINT").val(point);
                $("#LIST_ORDER").val(list_order);
                is_new = false;
                loadJsGrid();
            }
            else {
                Swal.fire(
                    "Can't edit!",
                    "Không có quyền sửa đổi!",
                    'error'
                )
            }
        }
        const saveReadingQuestion = () => {
            let reading_id = $("#READING_ID").val();
            let question_id = $("#QUESTION_ID").val();
            let question_text = $("#QUESTION_TEXT").val();
            let point = $("#POINT").val();
            let list_order = $("#LIST_ORDER").val();
            $.post("/Reading/saveReadingQuestion", {
                readingId : reading_id,
                questionId : question_id,
                questionText : question_text,
                point: point,
                listOrder: list_order,
                isNew: is_new
            }, function (e) {
                    if (e) {
                        var lstQuestion = initTableQuestions(e.Question, reading_id, e.NewQuestionId);
                        $("#contentListQuestion").html(lstQuestion);
                    }
            }, "json")
        }
        const deleteReadingQuestion = (questionId , id) => {
            Swal.fire({
                title: 'Bạn chắc chắn sẽ xóa?',
                text: "Bạn sẽ không thể khôi phục bản ghi này!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Xóa!',
                cancelButtonText: 'Đóng'
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        url: '@Url.Action("deleteReadingQuestion","Reading")' + `?id=${questionId}`,
                        type: 'POST',
                        success: function (data) {
                            if (data.Success) {
                               Swal.fire(
                                    'Deleted!',
                                    data.Message,
                                    'success'
                                )
                                showReadingQuestion(id);
                            }
                            else {
                              Swal.fire(
                                    "Can't Delete",
                                    data.Message,
                                    'error'
                                )
                            }
                        },
                         error: function (error) {
                             alert('Lỗi ajax' + error)
                        },
                        cache: false,
                        processData: false,
                        contentType: false
                    });
                }
            })
        }

        function loadJsGrid() {
            let question_id = $("#QUESTION_ID").val();
            $.post("/Question/GetAnswerByQuestionId", {
                question_id: question_id
            }, function (e) {
                if (e) {
                    data = e;
                }
                    $("#jsGrid").jsGrid({
                        width: "100%",
                        height: "400px",
                        autoload: true,
                        controller: {
                            insertItem: function (filter) {
                                insertGrid(filter)
                            },
                            updateItem: function (filter) {
                                updateGrid(filter)
                            },
                            deleteItem: function (filter) {
                                deleteGrid(filter)
                            }
                        },
                        onItemInserting: function (args) {
                            checkBeforeInsert(args)
                        },
                    deleteConfirm: "Bạn có chắc chắn muốn xóa không?",
                    invalidMessage: "Lỗi",
                    noDataContent: "Không có dữ liệu",
                    data: e,
                    inserting: true,
                    editing: true,
                    sorting: true,
                    paging: true,

                    fields: [
                        {
                            name: "DESCRIPTION", title: "Câu trả lời", type: "text", width: 150, validate: {
                                validator: "required",
                                message: function (value, item) {
                                    return "Cần nhập câu trả lời";
                                },
                            }
                        },
                        { name: "LIST_ORDER", title: "Sắp xếp", type: "number", width: 25 },
                        { name: "IS_CORRECT", type: "checkbox", width: 20, title: "Đáp án", sorting: false },
                        { type: "control" }
                    ]
                });
            }, "json")
        }

        function insertGrid(filter) {
            let question_id = $("#QUESTION_ID").val();
            return $.post("/Question/AddAnswer", {
                description: filter.DESCRIPTION,
                list_order: filter.LIST_ORDER,
                is_correct: filter.IS_CORRECT,
                question_id: question_id
            }, function (e) {
                loadJsGrid();
            }, "json")
        }
        function checkBeforeInsert(args) {
            let question_id = $("#QUESTION_ID").val();
            if (question_id == "" || question_id == null || question_id == undefined) {
                args.cancel = true;
                alert("Cần nhập mã câu hỏi");
            }
        }
        function updateGrid(filter) {
            let question_id = $("#QUESTION_ID").val();
            return $.post("/Question/UpdateAnswer", {
                answer_id: filter.ANSWER_ID,
                question_id: question_id,
                description: filter.DESCRIPTION,
                list_order: filter.LIST_ORDER,
                is_correct: filter.IS_CORRECT,
            }, function (e) {

            }, "json")
        }
        function deleteGrid(filter) {
            return $.post("/Question/DeleteAnswer", {
                answer_id: filter.ANSWER_ID,
                question_id: filter.QUESTION_ID
            }, function (e) {

            }, "json")
        }
    </script>
}